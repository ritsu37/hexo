{"pages":[{"title":"about","text":"","link":"/ritsu37.github.io/about/index.html"}],"posts":[{"title":"欢迎来到EGGICE","text":"1.自我介绍大家好，我是ritsu，可以叫我瑞兹。我是一名默默无闻的产品汪，热爱科技，注重人文艺术。梦想是可以像乔布斯那样来改变世界，造福人类。我将在这和大家分享有趣的知识和内容，希望你们也能喜欢~ 2.关于博客建站写博客这个想法是与公司前辈讨论职业规划时萌生的，就用闲暇时间搜集资料来落地想法。万事开头难，为了追求完美，在取名上就纠结大半部分时间。后来造出了eggice这个词语，一见钟情。也注册到了域名，和捡到宝一样，开心了好几天。通过建站写博客可以了解到web和网络技术，又能记录生活和工作上的收获，一举两得。再加上兴趣驱动，技术加持，我的博客网站也终于在今年顺利开张。舞台都搭好了，接下来就要开始好好输出干货了，争取每月至少两篇文章。 3.后记在改变世界这条路上，还有很多事情要做，科技也许就是那条最快最高效的捷径。我已经做好了我的选择，也打算穷极一生来追求梦想。不忘初心,方得始终。最后就放张图吧。","link":"/ritsu37.github.io/2020/02/01/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0EGGICE/"},{"title":"权限设计-RBAC模型","text":"前言进行设计前，最好能够理解技术模型。在业界接受度较高的功能权限模型是RBAC（Role-Based Access Control）模型，其基本理念是将“角色”这个概念赋予用户，在系统中用户与权限之间通过角色进行关联，以这样的方法来实现灵活配置。以下就模型与设计相关的几点做一下简单介绍。 1. 基本的RBAC模型如果没有角色的概念，系统中每加入一个用户，就需要为这个用户配置一遍权限，下图是wiki中直接为用户权限管理方式，可以看出管理成本巨大。 而引入“角色”概念后，如下图即是RBAC模型中最基本的模型：用户与角色可为多对一或多对多的关系，当一个用户的角色为多对多时，当前用户的权限是多个角色的并集。 此时只需要为角色赋予权限，能够大大减轻管理负担，同时将用户与权限解耦，提供更大的灵活性。 2. 引入用户组概念的RBAC模型在大型平台的应用上，试想如果用户量上万，新增一个角色时，可能需要为大量用户都分配一遍新的角色，工程量仍然巨大，此时即可以引入用户组的概念：如果部分用户的使用场景是相对一致和基础的，我们可以把这些用户打包成一个组，基于这个组的对象进行角色和权限的赋予。同理如果权限较多时也会存在一样的问题，处理方式是引入权限组的概念，将使用场景相对固定的一组功能或权限打包成组赋予角色。但是一般来讲一个系统中权限功能的体量是相对有限和可控的，所以实际应用中对权限组的使用较少。 下图所示为mac系统中运行添加用户组，并以用户组为单位配置权限； 需要注意的是即使有用户组或权限组的存在，也可以允许用户或权限与角色直接关联，这个可以视具体业务情况而定。 3. 角色继承的RBAC模型在一个业务场景中，如果角色需区分：设计主管、设计组长、设计成员，并且管理方式为向下兼容时，则需使用角色继承的RBAC模型：上层角色继承下层角色的全部权限，且可额外赋予权限。 此时除了对角色进行定义，还需要管理角色间的关系，通过关系来体现角色的层级关系，从而达到继承权限的效果。角色的继承关系主要有两种：树形图和有向无环图： 继承关系常常来源于公司团队的组织结构，此时常将角色与组织结构进行关联达到继承角色模型的效果；如下图所示的赵同学，其角色是“三级团队负责人”，与其并列的小组中有多个“三级团队负责人”的角色，但依附于左侧的组织结构树，各级负责人仅有查看和操作自己下属子节点的权限。 4. 限制的RBAC模型在一个产品或系统中，部分角色可能是需要隔离的、不允许被同时赋予一个人的。跟大家熟知的“不能既是‘运动员’又是‘裁判员’ ”一个道理。因此，对于众多角色中的一组，只能是单选的关系，但多组角色之间可以共同存在。如下图中，一个用户可以既为设计师又为管理员，但在设计师角色组中仅能被赋予一个角色，在管理员角色组中也仅能被赋予一个角色。 此外，限制还有可能是数量上的，比如一个产品组中必须有且只有一个管理员，不允许删除或再分配管理员角色，仅允许将负责人角色变更。 限制的模型不仅仅对分配过程产生影响，有时即使拥有了多种角色，因为不同的角色对同一个功能的使用方式或数据会产生冲突，所以使用时也需要进行限制。如下图所示为同一时间仅允许以一个身份登录。 根据不同的业务需求，限制的形式很多。需要注意的是不能仅依赖后端限制，而是要在前端展示清晰的规则和恰当的限制，避免用户出错和沮丧。 总结一下，整个权限系统设计就是定义各个节点和节点间关系的过程。节点包括：• 用户• 用户组• 角色• 角色组• 权限（页面、操作、数据）• 权限组（页面、操作、数据）关系包括：• 是/否关系• 继承关系• 限制关系（互斥、范围限制、边界限制、字段限制……）• ……","link":"/ritsu37.github.io/2020/03/15/%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"欢迎","slug":"欢迎","link":"/ritsu37.github.io/tags/%E6%AC%A2%E8%BF%8E/"},{"name":"权限设计","slug":"权限设计","link":"/ritsu37.github.io/tags/%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"随记","slug":"随记","link":"/ritsu37.github.io/categories/%E9%9A%8F%E8%AE%B0/"},{"name":"产品","slug":"产品","link":"/ritsu37.github.io/categories/%E4%BA%A7%E5%93%81/"}]}